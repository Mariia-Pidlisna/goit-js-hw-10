{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["import iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst form = document.querySelector(\".form\");\n\nform.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n    event.preventDefault(); // Щоб форма не перезавантажувала сторінку\n\n    const delay = Number(event.target.elements.delay.value); // Отримуємо затримку\n    const shouldResolve = event.target.elements.state.value === \"fulfilled\"; // Отримуємо стан з radio-кнопок\n\n    new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (shouldResolve) {\n                resolve(delay);\n            } else {\n                reject(delay);\n            }\n        }, delay);\n    })\n    .then((delay) => {\n        iziToast.success({\n            title: \"Ok\",\n            message: `Fulfilled promise in ${delay}ms`,\n            position: \"topRight\",\n            class: \"icon-svg-success\",\n            iconUrl: \"../img/bi_check2-circle.svg\",\n            backgroundColor: \"#59a10d\",\n            titleColor: \"#fff\",\n            messageColor: \"#fff\",\n        });\n    })\n    .catch((delay) => {\n        iziToast.error({\n            title: \"Error\",\n            message: `Rejected promise in ${delay}ms`,\n            position: \"topRight\",\n            class: \"icon-svg-error\",\n            backgroundColor: \"#ef4040\",\n            titleColor: \"#fff\",\n            messageColor: \"#fff\",\n            iconUrl: \"../img/bi_x-octagon.svg\",\n            \n        });\n    });\n}\n\n\n\n\n\n\n// Напиши скрипт, який після сабміту форми створює проміс. \n// В середині колбека цього промісу через вказану користувачем кількість \n// мілісекунд проміс має виконуватися (при fulfilled) або \n// відхилятися (при rejected), залежно від обраної опції в радіокнопках. \n// Значенням промісу, яке передається як аргумент у методи resolve/reject, \n// має бути значення затримки в мілісекундах.\n\n// Створений проміс треба опрацювати у відповідних для вдалого/невдалого \n// виконання методах.\n\n// Якщо проміс виконується вдало, виводь у консоль наступний рядок, де\n//  delay — це значення затримки виклику промісу в мілісекундах.\n\n//  `✅ Fulfilled promise in ${delay}ms`\n\n\n// Якщо проміс буде відхилено, то виводь у консоль наступний рядок, \n// де delay — це значення затримки промісу в мілісекундах.\n\n// `❌ Rejected promise in ${delay}ms`\n\n\n\n// Бібліотека повідомлень\n\n\n\n// Для відображення повідомлень, замість console.log(), використовуй \n// бібліотеку iziToast. Для того щоб підключити CSS код бібліотеки в \n// проєкт, необхідно додати ще один імпорт, крім того, що описаний у документації.\n\n"],"names":["form","handleSubmit","event","delay","shouldResolve","resolve","reject","iziToast"],"mappings":"wIAGA,MAAMA,EAAO,SAAS,cAAc,OAAO,EAE3CA,EAAK,iBAAiB,SAAUC,CAAY,EAE5C,SAASA,EAAaC,EAAO,CACzBA,EAAM,eAAc,EAEpB,MAAMC,EAAQ,OAAOD,EAAM,OAAO,SAAS,MAAM,KAAK,EAChDE,EAAgBF,EAAM,OAAO,SAAS,MAAM,QAAU,YAE5D,IAAI,QAAQ,CAACG,EAASC,IAAW,CAC7B,WAAW,IAAM,CACTF,EACAC,EAAQF,CAAK,EAEbG,EAAOH,CAAK,CAEnB,EAAEA,CAAK,CAChB,CAAK,EACA,KAAMA,GAAU,CACbI,EAAS,QAAQ,CACb,MAAO,KACP,QAAS,wBAAwBJ,CAAK,KACtC,SAAU,WACV,MAAO,mBACP,QAAS,8BACT,gBAAiB,UACjB,WAAY,OACZ,aAAc,MAC1B,CAAS,CACT,CAAK,EACA,MAAOA,GAAU,CACdI,EAAS,MAAM,CACX,MAAO,QACP,QAAS,uBAAuBJ,CAAK,KACrC,SAAU,WACV,MAAO,iBACP,gBAAiB,UACjB,WAAY,OACZ,aAAc,OACd,QAAS,yBAErB,CAAS,CACT,CAAK,CACL"}